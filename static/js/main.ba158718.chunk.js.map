{"version":3,"sources":["components/Header.js","components/AboutButton/AboutButton.js","components/AboutButton/index.js","data/actions/actions.js","components/About/About.js","components/About/index.js","components/BankPickButton/BankPickButton.js","components/BankPickButton/index.js","components/BankDeleteButton/BankDeleteButton.js","axios.js","components/BankDeleteButton/index.js","data/actions/api.js","components/Bank/Bank.js","components/Bank/index.js","components/AddPlayer/AddPlayer.js","components/AddPlayer/index.js","components/DrawPlayer/DrawPlayer.js","components/DrawPlayer/index.js","components/PicksList/PicksList.js","components/PicksCreateButton/PicksCreateButton.js","components/PicksCreateButton/index.js","components/PicksClearButton/PicksClearButton.js","components/PicksClearButton/index.js","components/Picks/Picks.js","components/Picks/index.js","components/NewPlayers/NewPlayers.js","components/NewPlayers/index.js","components/Team/Team.js","components/Team/Team1.js","components/Team/Team2.js","components/Reshuffle/Reshuffle.js","components/Reshuffle/index.js","components/Save/Save.js","components/Save/index.js","components/Teams/Teams.js","components/Teams/index.js","App.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Header","className","AboutButton","clickAbout","aboutDisplayed","onClick","connect","state","dispatch","type","About","href","target","rel","BankPickButton","props","handleClick","bind","event","preventDefault","this","selectPlayer","player","Component","bank","pickPlayer","BankDeleteButton","window","confirm","aria-label","axios","create","baseURL","headers","Accept","playerId","id","delete","then","deleteLocalPlayer","deletePlayer","Bank","handleLoad","players","length","map","some","pickedPlayer","name","play_count","get","playersData","data","AddPlayer","handleChange","handleSubmit","e","currentTarget","value","setState","handleSave","onSubmit","onChange","DrawPlayer","clickDraw","PicksList","message","index","PicksCreateButton","createClick","PicksClearButton","clickClearPickedPlayers","buttonText","Picks","NewPlayers","playersChosen","Team","teamName","team","generateClick","substring","team1Name","team1","Team1","team2Name","team2","Team2","Reshuffle","shuffleClick","Save","forEach","element","push","postList","putList","post","put","updatePlayCounts","Teams","App","initial","randomiseTeams","shuffledPlayers","i","pick","splice","Math","floor","random","slice","generateName","adjective","adjectives","everyday","everydayWords","noun","nouns","reducer","action","toggleAbout","isPicked","sort","a","b","storePlayers","filteredBank","filter","randomisedFilter","drawPlayer","trimLeft","trimRight","alert","bankPlayer","toLowerCase","playersMember","addPlayer","checkedPlayers","updatedBank","startGame","clearPickedPlayers","generateName1","generateName2","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba158718.chunk.js","sourcesContent":["const Header = () => (\n  <header className=\"header\">\n    <h1><i className=\"fas fa-futbol\"></i> Save Our Play</h1>  \n  </header>\n);\nexport default Header;","const AboutButton = ({ clickAbout, aboutDisplayed }) => ( \n    <button className=\"about-button\" onClick={ clickAbout }>\n        {aboutDisplayed ? \"Hide info\" : \"More info\" }\n    </button>\n);\nexport default AboutButton;","import AboutButton from \"./AboutButton\";\nimport { connect } from \"react-redux\";\nimport { aboutClicked } from \"../../data/actions/actions\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = state => {\n  return {\n    aboutDisplayed: state.aboutDisplayed,\n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = (dispatch) => {  \n  return {\n    clickAbout: () => dispatch(aboutClicked()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AboutButton);\n","// Action creator functions, for actions which trigger changes in the application state\n\n// Dispatched by the index.js files in the component folders\n// Actions carry at minimum an action type which are utilised in the reducer to enable particular reducer functions to be called.\n// They may also carry data passed into the function parameter (e.g. that of the particular player associated with a button)\n\nexport const aboutClicked = () => {\n  return {\n    type: \"ABOUT_CLICKED\"\n  };\n};\n\nexport const storePlayers = (data) => ({\n  type: \"STORE_PLAYERS\",\n  data: data,\n});\n\nexport const addPlayer = ({ player }) => {  \n  return {\n    type: \"ADD_PLAYER\",\n    player: player,\n  };\n};\n\nexport const pickPlayer = ( player ) => {  \n  return {\n    type: \"PICK_PLAYER\",\n    player: player,\n  };\n};\n\nexport const drawPlayer = () => {\n  return {\n    type: \"DRAW_PLAYER\"\n  };\n};\n\nexport const deleteLocalPlayer = (playerId) => ({\n  type: \"DELETE_PLAYER\",\n  playerId: playerId,\n});\n\nexport const createTeams = () => {\n  return {\n    type: \"CREATE_TEAMS\",\n  };\n};\n\nexport const clearPickedPlayers = () => {\n  return {\n    type: \"CLEAR_CLICKED_PLAYERS\",\n  };\n};\n\nexport const generateName1 = () => {\n  return {\n    type: \"GENERATE_NAME1\",\n  };\n};\n\nexport const generateName2 = () => {\n  return {\n    type: \"GENERATE_NAME2\",\n  };\n};\n\nexport const shuffleTeams = () => {\n  return {\n    type: \"RANDOMISE_TEAMS\",\n  };\n};\n\nexport const save = () => {\n  return {\n    type: \"SAVE\",\n  };\n};","import AboutButton from \"../AboutButton\";\n\nconst About = ({ aboutDisplayed }) => (\n  <section className=\"about-section\">\n    <div className=\"overview-wrapper\">\n      <div className=\"about-box overview\">\n        <h3 className=\"about-subheading\">Pick teams fairly and plan a series of friendly games, where everyone gets their turn.</h3>\n        <AboutButton aboutDisplayed={ aboutDisplayed }/>\n        { aboutDisplayed ? \n        <>\n          <p className=\"about-text about-1\">Save Our Play is for groups who play a regular series of games, considering:</p>\n          <ul>\n            <li>Not everyone is available to play in each game.</li>  \n            <li>More people may want to play than the team size - particularly with current COVID restrictions on the numbers in which teams can safely meet and practice.</li>  \n          </ul> \n        </>\n        :\n        null }          \n      </div>\n    </div>\n    { aboutDisplayed ? \n    <div className=\"about-boxes\">\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-volleyball-ball\"></i> Player bank</h3>\n        <p className=\"about-text\">To help adjudicate who’s due the next game when there are more people who want to play than spaces available, the player bank keeps track of the games assigned to each player on <span className=\"button-span\">Save</span>. You can <span className=\"button-span\">Pick</span> available players directly from the bank when you plan games.</p>\n      </div>      \n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-basketball-ball\"></i> Draw by play-count</h3>\n        <p className=\"about-text\">The <span className=\"button-span\">Draw</span> feature automatically picks players with the lowest play-counts. If multiple players have the lowest count, the selection is randomised within this set. Any team size is supported, respecting variation in restrictions.</p>\n        \n      </div>      \n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"far fa-futbol\"></i> Randomise Teams</h3>\n        <p className=\"about-text\">Once happy with player selection, sort players into teams randomly with <span className=\"button-span\">Create teams</span>. Randomise arrangements again with<span className=\"button-span\">Reshuffle teams</span>.</p>\n      </div>\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-futbol\"></i> Team name generator</h3>\n        <p className=\"about-text\">Don’t take play too seriously? The <span className=\"button-span\">Generate team name</span>feature will give you a (near) endless supply of tongue-in-cheek triple-barrel names for each side.</p>\n      </div>\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\">Version 2 information:</h3>\n        <p className=\"about-text\">Save our Play now stores player data between sessions, powered by <a href=\"https://github.com/ammersive/tp-back/\" target=\"_blank\" rel=\"noreferrer\">this API</a>. Version 1, which returns to a default state between browser sessions, can be found <a href=\"https://ammersive.github.io/team-picker/\" target=\"_blank\" rel=\"noreferrer\">here</a>. </p>\n        <AboutButton aboutDisplayed={ aboutDisplayed }/>\n      </div>\n    </div> :\n    null }\n  </section>\n);\nexport default About;","import About from \"./About\";\nimport { connect } from \"react-redux\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => {\n  return {\n    aboutDisplayed: state.aboutDisplayed,\n  };\n};\n\nexport default connect(mapStateToProps)(About);","import { Component } from \"react\";\nclass BankPickButton extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    // Pass up the player data (that was passed into this component) to the pick action so it knows which player to pick\n    this.props.selectPlayer(this.props.player);\n  }\n\n  render() {\n    return(\n      <button onClick={ this.handleClick }>Pick</button>\n    );\n  }\n}\n\nexport default BankPickButton;\n","import BankPickButton from \"./BankPickButton\";\nimport { connect } from \"react-redux\";\nimport { pickPlayer } from \"../../data/actions/actions\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = state => {\n  return {\n    bank: state.bank,\n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\n// The player must be passed in - even though there is only one BankPickButton component, it is rendered as many times are there are players in the bank, and so the action must carry information about which particular player to pick\nconst mapDispatchToProps = (dispatch) => {  \n  return {\n    selectPlayer: ( player ) => dispatch(pickPlayer(player)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BankPickButton);\n","import { Component } from \"react\";\nclass BankDeleteButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    if(window.confirm(\"Do you want to delete this player?\")){\n      // Pass up the player data (that was passed into this component) to the delete action so it knows which player to delete\n      this.props.selectPlayer(this.props.player);\n    }; \n  }\n\n  render() {\n    return(\n      <button aria-label=\"delete\" className=\"bank-clear\" onClick={ this.handleClick }><i className=\"far fa-trash-alt\"></i></button>\n    );\n  }\n}\n\nexport default BankDeleteButton;","// import the axios library\nimport axios from \"axios\";\n\n// return a new version of axios with useful settings applied\nexport default axios.create({\n  baseURL: \"https://save-our-play.developme.space/api/players\",\n  headers: {\n    // make sure we get JSON back\n    Accept: \"application/json\",\n  },\n});","import { connect } from \"react-redux\";\nimport BankDeleteButton from \"../BankDeleteButton/BankDeleteButton\";\nimport { deletePlayer } from \"../../data/actions/api\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\n// The player must be passed in - even though there is only one BankDeleteButton component, it is rendered as many times are there are players in the bank, and so the action must carry information about which particular player to delete\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    selectPlayer: (player) => dispatch(deletePlayer(player))       \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BankDeleteButton);","// Action creator functions, which make API calls, and which also dispatch state action creators from the actions.js file\n\n// import the axios configuration file with further details on the API endpoint URL and data formatting\nimport axios from \"../../axios\";\n\nimport {\n  storePlayers,\n  deleteLocalPlayer,\n  save,\n} from \"./actions\";\n\n// GET request to the database to return all player information\nexport const getPlayers = () => {\n  return (dispatch) => {\n    axios.get(\"/\").then(({ data }) => {\n      let playersData = data.data;\n      dispatch(storePlayers(playersData));  \n    });\n  };\n};\n\nexport const updatePlayCounts = (data) => {\n\n  let postList = [];\n  let putList = [];\n\n  // If a player's id is null, they are a new player, and their data will be sent to the DB in a POST request\n  // Remaining players already exist in the database, so their id is sent in a PUT request. \n  // (On the back end, an increment method updates the scores of the players whose ids are recieved through the PUT request)\n  data.forEach(element => element.id === null ? postList.push(element) : putList.push(element.id));\n  postList.forEach(element => delete element.id);\n\n  return (dispatch) => {\n    axios.post(\"/\", postList )\n    axios.put(\"/\", putList ).then(( ) => {\n      dispatch(save());\n    });\n  };\n};\n\n// Delete a player from the database and on success, delete them locally\n// We have to do this second local deletion because the Bank component isn’t hooked up directly to the database, it only has access to the local application state. Once that updates, it will re-render, with the deleted player no-longer showing\nexport const deletePlayer = (player) => {\n  let playerId = player.id;\n  return (dispatch) => {\n    axios.delete(`/${playerId}`)\n    .then(() => {\n      dispatch(deleteLocalPlayer(playerId));\n    });\n  };\n};","import { Component } from \"react\";\nimport BankPickButton from \"../BankPickButton/\";\nimport BankDeleteButton from \"../BankDeleteButton/\";\n\nclass Bank extends Component {\n\n  // This will dispatch and action to send a GET request to get all players from the database\n  // This action will populate the bank list in state with data from the database\n  // Because the bank list is passed into this component as a prop, when it changes, this bank component will re-render with updated information\n  componentDidMount() {\n    this.props.handleLoad();\n  }\n  \n  render() {\n    const { bank, players } = this.props;\n\n    return (    \n      <div className=\"bank\">\n        <h3>Player bank</h3> \n        {bank.length > 0 ? \n        <> \n          <h4>Number of plays</h4> \n          <ul>\n            \n            { bank.map((player) => (\n              <li className={ players.some(pickedPlayer => pickedPlayer.id === player.id) ? \"picked\" : null }>\n                <div className=\"bank-button-wrap\">\n                  <BankDeleteButton player={ player }/>\n                </div>                \n                <div className=\"player-cell\">\n                  { player.name }\n                </div>  \n                <div className=\"play-count-cell\">\n                  { player.play_count }\n                </div> \n                <div className=\"bank-button-wrap\">\n                  <BankPickButton player={ player }/>\n                </div>\n              </li>   \n            )) }\n          </ul>\n        </>\n        : <p className=\"no-players\">Bank is empty</p> }      \n      </div>    \n    );\n  }  \n};\n\nexport default Bank;","import { connect } from \"react-redux\";\nimport Bank from \"./Bank\";\nimport { getPlayers } from \"../../data/actions/api\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = state => {\n  return {\n    bank: state.bank,\n    players: state.players,\n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      handleLoad: () => dispatch(getPlayers()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bank);","import { Component } from \"react\";\n\nclass AddPlayer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tplayer: { id: null, name: \"\", play_count: 1 },\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(e) {\n\t\tlet player = { id: null, name: e.currentTarget.value, play_count: 1}; \n\t\tthis.setState({ player: player });\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tthis.props.handleSave({ ...this.state }); // copy the local state\tto pass up\t\t\t\n\t\tthis.setState({ player: { id: null, name: \"\", play_count: 1} }); //reset the state\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"draw-add-players\">\n\t\t\t\t<h3>Add</h3>\n\t\t\t\t<p>Add new player</p>\n\t\t\t\t<form onSubmit={ this.handleSubmit } >\n\t\t\t\t\t<input onChange={ this.handleChange } value={ this.state.player.name }/>\n\t\t\t\t\t<button className=\"add-button\">Add</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default AddPlayer;","import { connect } from \"react-redux\";\nimport AddPlayer from \"./AddPlayer\";\nimport { addPlayer } from \"../../data/actions/actions\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = state => {\n  return {\n    player: state.player\n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSave: data => dispatch(addPlayer(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPlayer);","const DrawPlayer = ({ clickDraw }) => (\n  <div className=\"draw-add-players\">\n    <h3>Draw</h3>\n    <p>Draw players due a game</p>    \n    <button className=\"draw-button\" onClick={ clickDraw }>Draw</button>\n  </div>\n);\nexport default DrawPlayer;\n","import { connect } from \"react-redux\";\nimport DrawPlayer from \"./DrawPlayer\";\nimport { drawPlayer } from \"../../data/actions/actions\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = dispatch => {\n  return {\n    clickDraw: () => dispatch(drawPlayer()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawPlayer);","const PicksList = ({ players }) => {\n  let message = \"\";\n\n  if ((players.length % 2 === 0) && (players.length > 0)) {\n    message = `${players.length} players added. Even teams, great!`;\n  }\n  else if (players.length === 1) {\n    message = `${players.length} player added. Teams will be uneven...`;\n  }\n  else if (players.length % 2 === 1) {\n    message = `${players.length} players added. Teams will be uneven...`;\n  }; \n\n  return ( \n    <>\n      <ul className=\"players-list\"> \n        { players.map((player, index) => (            \n          <li className=\"player-list-item\" key={ index }>{ player.name }</li> \n        )) } \n      </ul>\n      <p className=\"message\">{ message }</p>\n    </>\n  );\n};\n\nexport default PicksList;","import { Component } from \"react\";\n\nclass PicksCreateButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {    \n    this.props.createClick();\n  }\n\n  render() {\n    return(\n      this.props.players.length > 0 ?\n      <button className=\"create-button\" onClick={ this.handleClick }>Create Teams</button> :\n      <p className=\"no-players\">No players picked yet</p> \n    );\n  }\n}\n\nexport default PicksCreateButton;","import { connect } from \"react-redux\";\nimport PicksCreateButton from \"./PicksCreateButton\";\nimport { createTeams } from \"../../data/actions/actions\";\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = (dispatch) => { \n  return {    \n    createClick: () => dispatch(createTeams())    \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(PicksCreateButton);\n\n","const PicksClearButton = ({ clickClearPickedPlayers, buttonText, players }) => (\n  players.length > 0 ?\n  <button className=\"clear-picked-players\" onClick={ clickClearPickedPlayers }>\n  {buttonText}\n  </button> :\n  null  \n);\nexport default PicksClearButton;","import { connect } from \"react-redux\";\nimport PicksClearButton from \"./PicksClearButton\";\nimport { clearPickedPlayers } from \"../../data/actions/actions\";\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    clickClearPickedPlayers: () => dispatch(clearPickedPlayers())       \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(PicksClearButton);","import PicksList from \"../PicksList/PicksList\";\nimport PicksCreateButton from \"../PicksCreateButton\";\nimport PicksClearButton from \"../PicksClearButton\";\n\nconst Picks = ({ players }) => (\n  <div className=\"picks\">    \n    <h3>Picks</h3> \n    <PicksList players={ players }/> \n    <PicksCreateButton players={ players }/>\n    <PicksClearButton players={ players } buttonText={ \"Clear these players\" }/>\n  </div>\n);\n\nexport default Picks;  ","import { connect } from \"react-redux\";\nimport Picks from \"./Picks\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => {\n  return {\n    players: state.players,\n  };\n};\n\nexport default connect(mapStateToProps)(Picks);","import Bank from \"../Bank\";\nimport AddPlayer from \"../AddPlayer\";\nimport DrawPlayer from \"../DrawPlayer\";\nimport Picks from \"../Picks/\";\n\nconst NewPlayers = ({ players, bank, playersChosen }) => (\n  \n  !playersChosen ?\n\n  <section className=\"section-wrapper players-wrapper\">\n    <header className=\"section-header\">\n      <h2><i className=\"fas fa-futbol\"></i> Select Players</h2>\n    </header>\n    <div className=\"players-content-wrapper\">    \n      <div className=\"bank-wrapper\"> \n        <Bank bank={ bank } />       \n      </div>\n      <div className=\"draw-add-wrapper\"> \n        <DrawPlayer bank={ bank } /> \n        <AddPlayer bank={ bank } players={ players }/>\n      </div> \n      <div className=\"picks-wrapper\">\n        <Picks />\n      </div>\n    </div>\n  </section>\n\n  : null\n);\n\nexport default NewPlayers;","import { connect } from \"react-redux\";\nimport NewPlayers from \"./NewPlayers\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n    players: state.players,\n    playersChosen: state.playersChosen,\n  };\n};\n\nexport default connect(mapStateToProps)(NewPlayers);","const Team = ({ teamName, team, generateClick }) => {\n  return (\n    <div className=\"team-wrapper\">\n      <h3 className=\"team-name\">{ teamName }</h3>\n      <button className=\"generate\" onClick={ generateClick }>\n        {teamName.substring(0 , 4) === \"Team\" ? \"Generate team name\" : \"New name\"}\n      </button>\n      <ul className=\"team-list\"> \n        { team.map((player, index) => (            \n          <li className=\"team-member\" key={ index }>{ player.name }</li> \n        )) } \n      </ul>\n    </div>\n  );\n};\n\nexport default Team;","import { connect } from \"react-redux\";\nimport Team1 from \"./Team\";\nimport { generateName1 } from \"../../data/actions/actions\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => { \n  return {\n    teamName: state.team1Name,\n    team: state.team1        \n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    generateClick: () => dispatch(generateName1())    \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Team1);","import { connect } from \"react-redux\";\nimport Team2 from \"./Team\";\nimport { generateName2 } from \"../../data/actions/actions\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => { \n  return {\n    teamName: state.team2Name,\n    team: state.team2        \n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    generateClick: () => dispatch(generateName2())    \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Team2);","import { Component } from \"react\";\n\nclass Reshuffle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {    \n    this.props.shuffleClick();\n  }\n\n  render() {\n    return(\n      <button onClick={ this.handleClick }>Reshuffle teams</button>\n    );\n  }\n}\n\nexport default Reshuffle;","import { connect } from \"react-redux\";\nimport Reshuffle from \"./Reshuffle\";\nimport { shuffleTeams } from \"../../data/actions/actions\";\n\n// Dispatch an action to the store, to trigger a change in state\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    shuffleClick: () => dispatch(shuffleTeams())    \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Reshuffle);","import { Component } from \"react\";\n\nclass Save extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tplayers: props.players,\n\t\t};\n\t\tthis.handleSave = this.handleSave.bind(this);\n\t}\n\n\thandleSave() {\n\t\tlet data = [];\n\t\t// populate a list with data on which players were just selected to pass to the API action creator updatePlayCounts\n    this.state.players.forEach(element => data.push(element));\n\t\tthis.props.handleSave( data ); \t\t\n\t\tthis.setState({ players: [] }); \n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<button onClick={ this.handleSave }> \n        Save\n      </button>\n\t\t);\n\t}\n}\n\nexport default Save;","import { connect } from \"react-redux\";\nimport Save from \"./Save\";\nimport { updatePlayCounts } from \"../../data/actions/api\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => {\n  return {\n    players: state.players,\n  };\n};\n\n// Dispatch an action to the store, to trigger a change in state\n// data is a list of players who were just selected to be passed to the API action creator updatePlayCounts\nconst mapDispatchToProps = (dispatch) => { \n  return {       \n    handleSave: data => dispatch(updatePlayCounts(data))       \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Save);","// import GenerateName from \"../GenerateName\";\nimport Team1 from \"../Team/Team1\";\nimport Team2 from \"../Team/Team2\";\nimport Reshuffle from \"../Reshuffle/\";\nimport Save from \"../Save/\";\n\nconst Teams = ({ playersChosen, players }) => (\n  playersChosen ?\n  <section className=\"section-wrapper game-wrapper\">\n    <header className=\"section-header\">\n      <h2><i className=\"fas fa-futbol\"></i> Teams</h2>\n    </header>\n    <div className=\"shuffle\">\n      <Reshuffle />\n    </div>\n    <div className=\"teams\">\n      <div className=\"team\">\n        <Team1 />\n      </div>    \n      <div className=\"team\">\n        <Team2 />\n      </div>\n    </div>\n    <div className=\"save\">\n      <Save players={ players }/>\n    </div>      \n  </section> \n  : null\n);\n\nexport default Teams;","import { connect } from \"react-redux\";\nimport Teams from \"./Teams\";\n\n// Subscribe to values (and updates in those the values) in the application state\nconst mapStateToProps = (state) => {\n  return {\n    players: state.players,\n    team1Name: state.team1Name,\n    team2Name: state.team2Name,\n    playersChosen: state.playersChosen,\n  };\n};\n\nexport default connect(mapStateToProps)(Teams);","import Header from \"./components/Header\";\nimport About from \"./components/About/\";\nimport NewPlayers from \"./components/NewPlayers\";\nimport Teams from \"./components/Teams\";\n\nconst App = ({ aboutDisplayed }) => (\n  <>\n    <Header />\n    <About aboutDisplayed={ aboutDisplayed }/>\n    <NewPlayers />\n    <Teams />\n  </>\n);\n\nexport default App;\n","// initial application state\n\nconst initial = {\n  // When the Bank component mounts, a GET request is sent to the database.\n  // When it returns, this list is populated with all player objects in the database\n  // As the Bank component is subscribed to this list via the Redux store, that causes it to re-render displaying all players in the database\n  bank: [], \n  // Player objects are passed into this list when the user makes player selections on the \"Select Players\" screen.\n  // It is this list which populates the Picks component on that screen\n  players: [], \n  // The below 2 lists are populated via the randomiseTeams reducer in reducer.js, which is passed data from the picked players list above\n  // This happens when the user presses either the \"Create Teams\" or \"Reshuffle\" buttons\n  team1: [],\n  team2: [],\n  // The values of the below two variables are updated by the generateName reducer in reducer.js when the user presses the \"Generate team name\" buttons\n  team1Name: \"Team 1\",\n  team2Name: \"Team 2\",\n  // The NewPlayers and Teams components track the below value. \n  // It changes to true on click of the \"Create teams\" button.\n  // The child components of NewPlayers are hidden from view, whilst the child components of Teams are displayed\n  playersChosen: false,\n  // The About component tracks the below value, to either display or hide information about the application\n  aboutDisplayed: false,\n};\n\nexport default initial;","import initial from \"./initial\";\n\n// Shows/hides app information section\nconst toggleAbout = (state) => {\n  return {\n    ...state,\n    aboutDisplayed: !state.aboutDisplayed,  \n  };\n}\n\n// storePlayers takes data that has come from the back end via a get request to the API and populates the bank in the application's state\n// This causes the Bank component (which is subscribed to the bank list in state via the Redux store) to re-render populated with all players from the database\nconst storePlayers = (state, { data }) => {\n  let bank = data;\n\n  // Give each banked player a property of isPicked: this is for late data handling in drawPlayer()\n  bank.forEach(player => player.isPicked = false);\n\n  // Sort bank by id\n  // This is because new players will then be displayed at top of list, so user can see their changes more easily\n  bank.sort(( a, b ) => b.id - a.id);\n\n  return {\n      ...state,\n      bank: bank,\n  };\n};\n\n// pickPlayer fires when a \"Pick\" player button on the bank is clicked. \n// If the incoming player's id doesn't match a player already in the picked players list, it adds the incoming player to that list.\nconst pickPlayer = (state, { player }) => {\n  \n  if (player.isPicked === false) {\n    player.isPicked = true;\n    state.players = [...state.players, player];\n  };    \n\n  return {\n    ...state   \n  }; \n};\n\n// drawPlayer ensures players with the lowest play count are drawn first.\n// If multiple players share the lowest play count, they are picked at random - this is to avoid bias over multiple games.\nconst drawPlayer = (state) => {       \n  // If at least one player in the bank remains unpicked:\n    if (state.bank.some(player => player.isPicked === false)) {\n\n      // Filter players who have already been selected\n      let filteredBank = state.bank.filter( player => player.isPicked === false);\n\n      // Build a new randomised list from the filtered bank\n      let randomisedFilter = [];\n      for (let i = filteredBank.length; i > 0; i -= 1) {\n        let pick = filteredBank.splice(Math.floor(Math.random() * i), 1);\n        randomisedFilter.push(pick[0]);\n      };\n\n      // Sort highest to lowest play counts (players with same play counts will now not always appear at same/similar indices)\n      randomisedFilter.sort(( a, b ) => a.play_count - b.play_count); \n\n      // Select the first player (so, a player from the set of players with the lowest score, produced randomly), and add to players list\n      randomisedFilter[0].isPicked = true;\n      state.players = [...state.players, randomisedFilter[0]];\n    };\n\n  return {\n    ...state,\n  }; \n};\n\n// addPlayer handles the addition of new players to the picks list, and includes unique name validation so we don't have multiple players with the same name.\nconst addPlayer = (state, { player }) => {\n  // trim trailing whitespace from player name\n  player.name = player.name.trimLeft().trimRight();\n  \n  // prevent nameless players being added\n  if (player.name === \"\") {\n    alert(\"You cannot add a nameless player!\");\n    return state;\n  }\n  // prevent player names longer than the database allows\n  else if (player.name.length >= 50) {\n    alert(\"Player names must less than 50 characters long\");\n    return state;  \n  }  \n  // prevent non-unique player names (a case insensitive check to catch all potential matches)\n  else if (state.bank.some(bankPlayer => bankPlayer.name.toLowerCase() === player.name.toLowerCase())) {\n    alert(`A player called ${player.name} already exists in the bank. You can either add them directly from the bank with the pick button, or choose a different name`);\n    return state;\n  }\n    // invite the user to differentiate a name that matches a picked name, in case e.g. 2 Jens are playing\n  else if (state.players.some(playersMember => playersMember.name.toLowerCase() === player.name.toLowerCase())) {\n    alert(`A player called ${player.name} has already been picked. You can add an initial to tell them apart`);\n    return state;\n  } \n\n  return {\n    ...state,\n    players: [...state.players, player],    \n  }; \n};\n\n// deletePlayer fires after an API call to detele a player from the database.\n// It returns a new version of the local Bank with the delete player removed.\nconst deletePlayer = (state, { playerId }) => {\n  let checkedPlayers = state.players;\n\n  // Ensure that if the player has been added to the picked list, they are deleted from there\n  if (checkedPlayers.some(playersMember => playersMember.id === playerId)) {\n    checkedPlayers = checkedPlayers.filter((player) => player.id !== playerId);\n  }\n  // Filter the bank to remove the deleted player\n  let updatedBank = state.bank.filter((player) => player.id !== playerId);\n\n  return {\n    ...state, \n    bank: [...updatedBank],\n    players: [...checkedPlayers],\n  };\n}\n\n// startGame fires when the \"Create Teams\" button is pressed and moves the view to Teams, hiding the New Players view.\nconst startGame = (state) => {\n  return {\n    ...state,\n    playersChosen: true,  \n  };\n}\n\n// clearPickedPlayers clears the picked players list.\nconst clearPickedPlayers = (state) => {\n  state.bank.forEach(player => player.isPicked = false);\n \n  return {\n    ...state,\n    players: [],\n  }; \n};\n\n// randomiseTeams randomises the picked players list and pushes players to each team list.\nconst randomiseTeams = (state) => {\n  let players = [...state.players];\n  let shuffledPlayers = [];\n\n  // For genuine (pseudo!)randomness, players are first pulled at random from the players list, and then pushed to the front of a new list.\n  // This avoids biasing effects: should players be pushed at random into an empty list, those players pushed first will cluster together before the list grows.\n  // This matters because the draw feature always adds players in a predictable order (according to their play-counts). \n  for (let i = players.length; i > 0; i -= 1) {\n    let pick = players.splice(Math.floor(Math.random() * i), 1);\n    shuffledPlayers.push(pick[0]);\n  };\n\n  return {\n    ...state,\n    team1: shuffledPlayers.slice(0, (shuffledPlayers.length / 2)),    \n    team2: shuffledPlayers.slice(shuffledPlayers.length / 2),    \n  };\n};\n\n// generateName randomly generates a triple-barreled team name by picking words at random from three lists (see bottom).\nconst generateName = () => {\n  let adjective = adjectives[(Math.floor(Math.random() * adjectives.length))];  \n  let everyday = everydayWords[(Math.floor(Math.random() * everydayWords.length))]; \n  let noun = nouns[(Math.floor(Math.random() * nouns.length))]; \n  \n  let teamName = `${adjective} ${everyday} ${noun}`;\n\n  return {\n    teamName,\n  }\n}\n\n// Calls generateName() to assign team 1's name\nconst generateName1 = (state) => {\n  let name = generateName().teamName;\n  return {\n    ...state,\n    team1Name: name,\n  }; \n};\n\n// Calls generateName() to assign team 2's name\nconst generateName2 = (state) => {\n  let name = generateName().teamName;\n  return {\n    ...state,\n    team2Name: name,\n  }; \n};\n\n// save returns the initial application state, and is dispatched after the api receives player data from the current game\nconst save = () => {\n    return initial\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ABOUT_CLICKED\": return toggleAbout(state);\n    case \"STORE_PLAYERS\": return storePlayers(state, action);\n    case \"PICK_PLAYER\": return pickPlayer(state, action);\n    case \"DRAW_PLAYER\": return drawPlayer(state);\n    case \"ADD_PLAYER\": return addPlayer(state, action);\n    case \"DELETE_PLAYER\": return deletePlayer(state, action);    \n    case \"CREATE_TEAMS\": return startGame(randomiseTeams(state));\n    case \"CLEAR_CLICKED_PLAYERS\": return clearPickedPlayers(state);\n    case \"RANDOMISE_TEAMS\": return randomiseTeams(state);\n    case \"GENERATE_NAME1\": return generateName1(state);\n    case \"GENERATE_NAME2\": return generateName2(state);\n    case \"SAVE\": return save(state);\n    default: return state;\n  }\n};\n\n// Word banks for name generator\n\nconst adjectives = [\n  \"Flying\",\n  \"Tremendous\",\n  \"Furious\",\n  \"Surging\",\n  \"Majestic\",\n  \"Dazzling\",\n  \"Mighty\",\n  \"Dribbling\",\n  \"Tottering\",\n  \"Shambling\",\n  \"Staggering\",\n  \"Stumbling\",\n  \"Doddering\",\n  \"Shambolic\",\n  \"Drunken\",\n  \"Glorious\",\n  \"Magnificent\",\n  \"Torrential\",\n  \"Lightning\"\n];\n\nconst everydayWords = [\n  \"Foot\",\n  \"Toe\",\n  \"Big Toe\",\n  \"Heel\",\n  \"Hamstrung\",\n  \"Knee\",\n  \"Tootsie\",\n  \"Boot\",\n  \"Trainer\",\n  \"ArmChair\",\n  \"Deckchair\",\n  \"Couch\",\n  \"Sofa\",\n  \"Beer\",\n  \"Lager\",\n  \"Booze\"\n];\n\nconst nouns = [\n  \"Colonels\",\n  \"Crushers\",\n  \"Divas\",\n  \"Amigos\",\n  \"Stars\",\n  \"Typhoons\",\n  \"Ladies\",\n  \"Boys\",\n  \"Squirrels\",\n  \"Brigade\",\n  \"Foxes\",\n  \"Heroes\",\n  \"Wolves\",\n  \"Mob\",\n  \"Troop\",\n  \"Legion\",\n  \"Blokes\",\n  \"Lassies\",\n  \"Lads\"\n];\n\nexport default reducer;","// Import the store functionality from redux to allow components to subscribe to updates from the application's state\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport initial from \"./initial\";\nimport reducer from \"./reducer\";\n\nconst composeEnhancers =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  \nconst store = createStore(\n  reducer,\n  initial,\n  // necessary middleware for api actions\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import reportWebVitals from './reportWebVitals';\nimport './styles/main.css';\nimport App from './App';\nimport store from \"./data/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// reportWebVitals();\n"],"sourceRoot":""}