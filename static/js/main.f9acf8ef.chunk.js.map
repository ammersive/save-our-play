{"version":3,"sources":["components/Header.js","components/AboutButton/AboutButton.js","components/AboutButton/index.js","data/actions/actions.js","components/About/About.js","components/About/index.js","components/BankPickButton/BankPickButton.js","components/BankPickButton/index.js","components/BankDeleteButton/BankDeleteButton.js","axios.js","components/BankDeleteButton/index.js","data/actions/api.js","components/Bank/Bank.js","components/Bank/index.js","components/AddPlayer/AddPlayer.js","components/AddPlayer/index.js","components/DrawPlayer/DrawPlayer.js","components/DrawPlayer/index.js","components/PicksList/PicksList.js","components/PicksCreateButton/PicksCreateButton.js","components/PicksCreateButton/index.js","components/PicksClearButton/PicksClearButton.js","components/PicksClearButton/index.js","components/Picks/Picks.js","components/Picks/index.js","components/NewPlayers/NewPlayers.js","components/NewPlayers/index.js","components/Team/Team.js","components/Team/Team1.js","components/Team/Team2.js","components/Reshuffle/Reshuffle.js","components/Reshuffle/index.js","components/Save/Save.js","components/Save/index.js","components/Teams/Teams.js","components/Teams/index.js","App.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Header","className","AboutButton","clickAbout","aboutDisplayed","onClick","connect","state","dispatch","type","About","href","target","rel","BankPickButton","props","handleClick","bind","event","preventDefault","this","selectPlayer","player","Component","bank","console","log","pickPlayer","BankDeleteButton","window","confirm","aria-label","axios","create","baseURL","headers","Accept","playerId","id","delete","then","deleteLocalPlayer","deletePlayer","Bank","handleLoad","players","length","map","some","pickedPlayer","name","play_count","get","playersData","data","AddPlayer","handleChange","handleSubmit","e","currentTarget","value","setState","handleSave","onSubmit","onChange","addPlayer","DrawPlayer","clickDraw","PicksList","message","index","PicksCreateButton","createClick","PicksClearButton","clickClearPickedPlayers","buttonText","Picks","NewPlayers","playersChosen","Team","teamName","team","generateClick","substring","team1Name","team1","Team1","team2Name","team2","Team2","Reshuffle","shuffleClick","Save","forEach","element","push","postList","putList","post","put","updatePlayCounts","Teams","App","initial","randomiseTeams","shuffledPlayers","i","pick","splice","Math","floor","random","slice","generateName","adjective","adjectives","everyday","everydayWords","noun","nouns","reducer","action","toggleAbout","isPicked","sort","a","b","storePlayers","filteredBank","filter","randomisedFilter","drawPlayer","trimLeft","trimRight","alert","bankPlayer","toLowerCase","playersMember","checkedPlayers","updatedBank","startGame","clearPickedPlayers","generateName1","generateName2","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9acf8ef.chunk.js","sourcesContent":["const Header = () => (\n  <header className=\"header\">\n    <h1><i className=\"fas fa-futbol\"></i> Save Our Play</h1>  \n  </header>\n);\nexport default Header;","const AboutButton = ({ clickAbout, aboutDisplayed }) => ( \n    <button className=\"about-button\" onClick={ clickAbout }>\n        {aboutDisplayed ? \"Hide info\" : \"More info\" }\n    </button>\n);\nexport default AboutButton;","import AboutButton from \"./AboutButton\";\nimport { connect } from \"react-redux\";\nimport { aboutClicked } from \"../../data/actions/actions\";\n\nconst mapStateToProps = state => {\n  return {\n    aboutDisplayed: state.aboutDisplayed,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {  \n  return {\n    clickAbout: () => dispatch(aboutClicked()),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AboutButton);\n","export const aboutClicked = () => {\n  return {\n    type: \"ABOUT_CLICKED\"\n  };\n};\n\nexport const storePlayers = (data) => ({\n  type: \"STORE_PLAYERS\",\n  data: data,\n});\n\nexport const addPlayer = ({ player }) => {\n  console.log(\"added player: \", player);\n  return {\n    type: \"ADD_PLAYER\",\n    player: player,\n  };\n};\n\nexport const pickPlayer = ( player ) => {\n  console.log(\"from action: \", player)\n  return {\n    type: \"PICK_PLAYER\",\n    player: player,\n  };\n};\n\nexport const drawPlayer = () => {\n  return {\n    type: \"DRAW_PLAYER\"\n  };\n};\n\nexport const deleteLocalPlayer = (playerId) => ({\n  type: \"DELETE_PLAYER\",\n  playerId: playerId,\n});\n\nexport const createTeams = () => {\n  return {\n    type: \"CREATE_TEAMS\",\n  };\n};\n\nexport const clearPickedPlayers = () => {\n  return {\n    type: \"CLEAR_CLICKED_PLAYERS\",\n  };\n};\n\nexport const generateName1 = () => {\n  return {\n    type: \"GENERATE_NAME1\",\n  };\n};\n\nexport const generateName2 = () => {\n  return {\n    type: \"GENERATE_NAME2\",\n  };\n};\n\nexport const shuffleTeams = () => {\n  return {\n    type: \"RANDOMISE_TEAMS\",\n  };\n};\n\nexport const save = () => {\n  return {\n    type: \"SAVE\",\n  };\n};","import AboutButton from \"../AboutButton\";\n\nconst About = ({ aboutDisplayed }) => (\n  <section className=\"about-section\">\n    <div className=\"overview-wrapper\">\n      <div className=\"about-box overview\">\n        <h3 className=\"about-subheading\">Pick teams fairly and plan a series of friendly games, where everyone gets their turn.</h3>\n        <AboutButton aboutDisplayed={ aboutDisplayed }/>\n        { aboutDisplayed ? \n        <>\n          <p className=\"about-text about-1\">Save Our Play is for groups who play a regular series of games, considering:</p>\n          <ul>\n            <li>Not everyone is available to play in each game.</li>  \n            <li>More people may want to play than the team size - particularly with current COVID restrictions on the numbers in which teams can safely meet and practice.</li>  \n          </ul> \n        </>\n        :\n        null }          \n      </div>\n    </div>\n    { aboutDisplayed ? \n    <div className=\"about-boxes\">\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-volleyball-ball\"></i> Player bank</h3>\n        <p className=\"about-text\">To help adjudicate who’s due the next game when there are more people who want to play than spaces available, the player bank keeps track of the games assigned to each player on <span className=\"button-span\">Save</span>. You can <span className=\"button-span\">Pick</span> available players directly from the bank when you plan games.</p>\n      </div>      \n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-basketball-ball\"></i> Draw by play-count</h3>\n        <p className=\"about-text\">The <span className=\"button-span\">Draw</span> feature automatically picks players with the lowest play-counts. If multiple players have the lowest count, the selection is randomised within this set. Any team size is supported, respecting variation in restrictions.</p>\n        \n      </div>      \n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"far fa-futbol\"></i> Randomise Teams</h3>\n        <p className=\"about-text\">Once happy with player selection, sort players into teams randomly with <span className=\"button-span\">Create teams</span>. Randomise arrangements again with<span className=\"button-span\">Reshuffle teams</span>.</p>\n      </div>\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\"><i className=\"fas fa-futbol\"></i> Team name generator</h3>\n        <p className=\"about-text\">Don’t take play too seriously? The <span className=\"button-span\">Generate team name</span>feature will give you a (near) endless supply of tongue-in-cheek triple-barrel names for each side.</p>\n      </div>\n      <div className=\"about-box\">\n        <h3 className=\"about-subheading\">Version 2 information:</h3>\n        <p className=\"about-text\">Save our Play now stores player data between sessions, powered by <a href=\"https://github.com/ammersive/tp-back/\" target=\"_blank\" rel=\"noreferrer\">this API</a>. Version 1, which returns to a default state between browser sessions, can be found <a href=\"https://ammersive.github.io/team-picker/\" target=\"_blank\" rel=\"noreferrer\">here</a>. </p>\n        <AboutButton aboutDisplayed={ aboutDisplayed }/>\n      </div>\n    </div> :\n    null }\n  </section>\n);\nexport default About;","import About from \"./About\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    aboutDisplayed: state.aboutDisplayed,\n  };\n};\n\nexport default connect(mapStateToProps)(About);","import { Component } from \"react\";\nclass BankPickButton extends Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    this.props.selectPlayer(this.props.player);\n  }\n\n  render() {\n    return(\n      <button onClick={ this.handleClick }>Pick</button>\n    );\n  }\n}\n\nexport default BankPickButton;\n","import BankPickButton from \"./BankPickButton\";\nimport { connect } from \"react-redux\";\nimport { pickPlayer } from \"../../data/actions/actions\";\n\nconst mapStateToProps = state => {\n  return {\n    bank: state.bank,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {  \n  return {\n    selectPlayer: ( player ) => dispatch(pickPlayer(player)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BankPickButton);\n","import { Component } from \"react\";\nclass BankDeleteButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    console.log(\"player from bank button: \", this.props.player);\n    if(window.confirm(\"Do you want to delete this player?\")){\n      this.props.selectPlayer(this.props.player);\n    }; \n  }\n\n  render() {\n    return(\n      <button aria-label=\"delete\" className=\"bank-clear\" onClick={ this.handleClick }><i className=\"far fa-trash-alt\"></i></button>\n    );\n  }\n}\n\nexport default BankDeleteButton;","// import the axios library\nimport axios from \"axios\";\n\n// return a new version of axios with useful settings applied\nexport default axios.create({\n  baseURL: \"https://save-our-play.developme.space/api/players\",\n  headers: {\n    // make sure we get JSON back\n    Accept: \"application/json\",\n  },\n});","import { connect } from \"react-redux\";\nimport BankDeleteButton from \"../BankDeleteButton/BankDeleteButton\";\nimport { deletePlayer } from \"../../data/actions/api\";\n\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    selectPlayer: (player) => dispatch(deletePlayer(player))       \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BankDeleteButton);","import axios from \"../../axios\";\n\nimport {\n  storePlayers,\n  deleteLocalPlayer,\n  save,\n} from \"./actions\";\n\nexport const getPlayers = () => {\n  return (dispatch) => {\n    axios.get(\"/\").then(({ data }) => {\n      let playersData = data.data;\n      dispatch(storePlayers(playersData));  \n    });\n  };\n};\n\nexport const updatePlayCounts = (data) => {\n\n  let postList = [];\n  let putList = [];\n\n  // If a player's id is null, they are a new player, and their data will be sent to the DB in a POST request\n  // Remaining players already exist in the database, so their id is sent in a PUT request. \n  // (On the back end, an increment method updates the scores of the players whose ids are recieved through the PUT request)\n  data.forEach(element => element.id === null ? postList.push(element) : putList.push(element.id));\n  postList.forEach(element => delete element.id);\n\n  return (dispatch) => {\n    axios.post(\"/\", postList )\n    axios.put(\"/\", putList ).then(( ) => {\n      dispatch(save());\n    });\n  };\n};\n\nexport const deletePlayer = (player) => {\n  let playerId = player.id;\n  return (dispatch) => {\n    axios.delete(`/${playerId}`)\n    .then(() => {\n      dispatch(deleteLocalPlayer(playerId));\n    });\n  };\n};","import { Component } from \"react\";\nimport BankPickButton from \"../BankPickButton/\";\nimport BankDeleteButton from \"../BankDeleteButton/\";\n\nclass Bank extends Component {\n\n  componentDidMount() {\n    this.props.handleLoad();\n  }\n  \n  render() {\n    const { bank, players } = this.props;\n\n    return (    \n      <div className=\"bank\">\n        <h3>Player bank</h3> \n        {bank.length > 0 ? \n        <> \n          <h4>Number of plays</h4> \n          <ul>\n            \n            { bank.map((player) => (\n              <li className={ players.some(pickedPlayer => pickedPlayer.id === player.id) ? \"picked\" : null }>\n                <div className=\"bank-button-wrap\">\n                  <BankDeleteButton player={ player }/>\n                </div>                \n                <div className=\"player-cell\">\n                  { player.name }\n                </div>  \n                <div className=\"play-count-cell\">\n                  { player.play_count }\n                </div> \n                <div className=\"bank-button-wrap\">\n                  <BankPickButton player={ player }/>\n                </div>\n              </li>   \n            )) }\n          </ul>\n        </>\n        : <p className=\"no-players\">Bank is empty</p> }      \n      </div>    \n    );\n  }  \n};\n\nexport default Bank;","import { connect } from \"react-redux\";\nimport Bank from \"./Bank\";\nimport { getPlayers } from \"../../data/actions/api\";\n\nconst mapStateToProps = state => {\n  return {\n    bank: state.bank,\n    players: state.players,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      handleLoad: () => dispatch(getPlayers()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bank);","import { Component } from \"react\";\n\nclass AddPlayer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tplayer: { id: null, name: \"\", play_count: 1 },\n\t\t};\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(e) {\n\t\tlet player = { id: null, name: e.currentTarget.value, play_count: 1}; \n\t\tthis.setState({ player: player });\n\t}\n\n\thandleSubmit(e) {\n\t\te.preventDefault();\n\t\tthis.props.handleSave({ ...this.state }); // copy the local state\tto pass up\t\t\t\n\t\tthis.setState({ player: { id: null, name: \"\", play_count: 1} }); //reset the state\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"draw-add-players\">\n\t\t\t\t<h3>Add</h3>\n\t\t\t\t<p>Add new player</p>\n\t\t\t\t<form onSubmit={ this.handleSubmit } >\n\t\t\t\t\t<input onChange={ this.handleChange } value={ this.state.player.name }/>\n\t\t\t\t\t<button className=\"add-button\">Add</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default AddPlayer;","import { connect } from \"react-redux\";\nimport AddPlayer from \"./AddPlayer\";\nimport { addPlayer } from \"../../data/actions/actions\";\n\nconst mapStateToProps = state => {\n  return {\n    player: state.player\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSave: data => dispatch(addPlayer(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPlayer);","const DrawPlayer = ({ clickDraw }) => (\n  <div className=\"draw-add-players\">\n    <h3>Draw</h3>\n    <p>Draw players due a game</p>    \n    <button className=\"draw-button\" onClick={ clickDraw }>Draw</button>\n  </div>\n);\nexport default DrawPlayer;\n","import { connect } from \"react-redux\";\nimport DrawPlayer from \"./DrawPlayer\";\nimport { drawPlayer } from \"../../data/actions/actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    clickDraw: () => dispatch(drawPlayer()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DrawPlayer);","const PicksList = ({ players }) => {\n  let message = \"\";\n\n  if ((players.length % 2 === 0) && (players.length > 0)) {\n    message = `${players.length} players added. Even teams, great!`;\n  }\n  else if (players.length === 1) {\n    message = `${players.length} player added. Teams will be uneven...`;\n  }\n  else if (players.length % 2 === 1) {\n    message = `${players.length} players added. Teams will be uneven...`;\n  }; \n\n  return ( \n    <>\n      <ul className=\"players-list\"> \n        { players.map((player, index) => (            \n          <li className=\"player-list-item\" key={ index }>{ player.name }</li> \n        )) } \n      </ul>\n      <p className=\"message\">{ message }</p>\n    </>\n  );\n};\n\nexport default PicksList;","import { Component } from \"react\";\n\nclass PicksCreateButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {    \n    this.props.createClick();\n  }\n\n  render() {\n    return(\n      this.props.players.length > 0 ?\n      <button className=\"create-button\" onClick={ this.handleClick }>Create Teams</button> :\n      <p className=\"no-players\">No players picked yet</p> \n    );\n  }\n}\n\nexport default PicksCreateButton;","import { connect } from \"react-redux\";\nimport PicksCreateButton from \"./PicksCreateButton\";\nimport { createTeams } from \"../../data/actions/actions\";\n\nconst mapDispatchToProps = (dispatch) => { \n  return {    \n    createClick: () => dispatch(createTeams())    \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(PicksCreateButton);\n\n","const PicksClearButton = ({ clickClearPickedPlayers, buttonText, players }) => (\n  players.length > 0 ?\n  <button className=\"clear-picked-players\" onClick={ clickClearPickedPlayers }>\n  {buttonText}\n  </button> :\n  null  \n);\nexport default PicksClearButton;","import { connect } from \"react-redux\";\nimport PicksClearButton from \"./PicksClearButton\";\nimport { clearPickedPlayers } from \"../../data/actions/actions\";\n\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    clickClearPickedPlayers: () => dispatch(clearPickedPlayers())       \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(PicksClearButton);","import PicksList from \"../PicksList/PicksList\";\nimport PicksCreateButton from \"../PicksCreateButton\";\nimport PicksClearButton from \"../PicksClearButton\";\n\nconst Picks = ({ players }) => (\n  <div className=\"picks\">    \n    <h3>Picks</h3> \n    <PicksList players={ players }/> \n    <PicksCreateButton players={ players }/>\n    <PicksClearButton players={ players } buttonText={ \"Clear these players\" }/>\n  </div>\n);\n\nexport default Picks;  ","import { connect } from \"react-redux\";\nimport Picks from \"./Picks\";\n\nconst mapStateToProps = (state) => {\n  return {\n    players: state.players,\n  };\n};\n\nexport default connect(mapStateToProps)(Picks);","import Bank from \"../Bank\";\nimport AddPlayer from \"../AddPlayer\";\nimport DrawPlayer from \"../DrawPlayer\";\nimport Picks from \"../Picks/\";\n\nconst NewPlayers = ({ players, bank, playersChosen }) => (\n  \n  !playersChosen ?\n\n  <section className=\"section-wrapper players-wrapper\">\n    <header className=\"section-header\">\n      <h2><i className=\"fas fa-futbol\"></i> Select Players</h2>\n    </header>\n    <div className=\"players-content-wrapper\">    \n      <div className=\"bank-wrapper\"> \n        <Bank bank={ bank } />       \n      </div>\n      <div className=\"draw-add-wrapper\"> \n        <DrawPlayer bank={ bank } /> \n        <AddPlayer bank={ bank } players={ players }/>\n      </div> \n      <div className=\"picks-wrapper\">\n        <Picks />\n      </div>\n    </div>\n  </section>\n\n  : null\n);\n\nexport default NewPlayers;","import { connect } from \"react-redux\";\nimport NewPlayers from \"./NewPlayers\";\n\nconst mapStateToProps = (state) => {\n  return {\n    bank: state.bank,\n    players: state.players,\n    playersChosen: state.playersChosen,\n  };\n};\n\nexport default connect(mapStateToProps)(NewPlayers);","const Team = ({ teamName, team, generateClick }) => {\n  return (\n    <div className=\"team-wrapper\">\n      <h3 className=\"team-name\">{ teamName }</h3>\n      <button className=\"generate\" onClick={ generateClick }>\n        {teamName.substring(0 , 4) === \"Team\" ? \"Generate team name\" : \"New name\"}\n      </button>\n      <ul className=\"team-list\"> \n        { team.map((player, index) => (            \n          <li className=\"team-member\" key={ index }>{ player.name }</li> \n        )) } \n      </ul>\n    </div>\n  );\n};\n\nexport default Team;","import { connect } from \"react-redux\";\n\nimport Team1 from \"./Team\";\n\nimport { generateName1 } from \"../../data/actions/actions\";\n\nconst mapStateToProps = (state) => { \n  return {\n    teamName: state.team1Name,\n    team: state.team1        \n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    generateClick: () => dispatch(generateName1())    \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Team1);","import { connect } from \"react-redux\";\n\nimport Team2 from \"./Team\";\n\nimport { generateName2 } from \"../../data/actions/actions\";\n\nconst mapStateToProps = (state) => { \n  return {\n    teamName: state.team2Name,\n    team: state.team2        \n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    generateClick: () => dispatch(generateName2())    \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Team2);","import { Component } from \"react\";\n\nclass Reshuffle extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {    \n    this.props.shuffleClick();\n  }\n\n  render() {\n    return(\n      <button onClick={ this.handleClick }>Reshuffle teams</button>\n    );\n  }\n}\n\nexport default Reshuffle;","import { connect } from \"react-redux\";\nimport Reshuffle from \"./Reshuffle\";\nimport { shuffleTeams } from \"../../data/actions/actions\";\n\nconst mapDispatchToProps = (dispatch) => {\n  return {    \n    shuffleClick: () => dispatch(shuffleTeams())    \n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Reshuffle);","import { Component } from \"react\";\n\nclass Save extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tplayers: props.players,\n\t\t};\n\t\tthis.handleSave = this.handleSave.bind(this);\n\t}\n\n\thandleSave() {\n    let data = [];\n    this.state.players.forEach(element => data.push(element));\n\t\tthis.props.handleSave( data ); \t\t\n\t\tthis.setState({ players: [] }); \n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<button onClick={ this.handleSave }> \n        Save\n      </button>\n\t\t);\n\t}\n}\n\nexport default Save;","import { connect } from \"react-redux\";\nimport Save from \"./Save\";\nimport { updatePlayCounts } from \"../../data/actions/api\";\n\nconst mapStateToProps = (state) => {\n  return {\n    players: state.players,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => { \n  return {       \n    handleSave: data => dispatch(updatePlayCounts(data))       \n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Save);","// import GenerateName from \"../GenerateName\";\nimport Team1 from \"../Team/Team1\";\nimport Team2 from \"../Team/Team2\";\nimport Reshuffle from \"../Reshuffle/\";\nimport Save from \"../Save/\";\n\nconst Teams = ({ playersChosen, players }) => (\n  playersChosen ?\n  <section className=\"section-wrapper game-wrapper\">\n    <header className=\"section-header\">\n      <h2><i className=\"fas fa-futbol\"></i> Teams</h2>\n    </header>\n    <div className=\"shuffle\">\n      <Reshuffle />\n    </div>\n    <div className=\"teams\">\n      <div className=\"team\">\n        <Team1 />\n      </div>    \n      <div className=\"team\">\n        <Team2 />\n      </div>\n    </div>\n    <div className=\"save\">\n      <Save players={ players }/>\n    </div>      \n  </section> \n  : null\n);\n\nexport default Teams;","import { connect } from \"react-redux\";\nimport Teams from \"./Teams\";\n\nconst mapStateToProps = (state) => {\n  return {\n    players: state.players,\n    team1Name: state.team1Name,\n    team2Name: state.team2Name,\n    playersChosen: state.playersChosen,\n  };\n};\n\nexport default connect(mapStateToProps)(Teams);","import Header from \"./components/Header\";\nimport About from \"./components/About/\";\nimport NewPlayers from \"./components/NewPlayers\";\nimport Teams from \"./components/Teams\";\n\nconst App = ({ aboutDisplayed }) => (\n  <>\n    <Header />\n    <About aboutDisplayed={ aboutDisplayed }/>\n    <NewPlayers />\n    <Teams />\n  </>\n);\n\nexport default App;\n","const initial = {\n  players: [], \n  team1: [],\n  team2: [],\n  team1Name: \"Team 1\",\n  team2Name: \"Team 2\",\n  bank: [],\n  playersChosen: false,\n  aboutDisplayed: false,\n};\n\nexport default initial;","import initial from \"./initial\";\n\n// Shows/hides app information section\nconst toggleAbout = (state) => {\n  return {\n    ...state,\n    aboutDisplayed: !state.aboutDisplayed,  \n  };\n}\n\n// storePlayers takes data that has come from the back end via a get request to the API and populates the bank in the application's state\nconst storePlayers = (state, { data }) => {\n  let bank = data;\n\n  // Give each banked player a property of isPicked, for data manipulation in drawPlayer()\n  bank.forEach(player => player.isPicked = false);\n\n  // Sort bank by id as it will display new players at top of list so user can see their changes more easily\n  bank.sort(( a, b ) => b.id - a.id);\n\n  return {\n      ...state,\n      bank: bank,\n  };\n};\n\n// pickPlayer fires when a \"Pick\" player button on the bank is clicked. \n// If the incoming player's id doesn't match a player already in the picked players list, it adds the incoming player to that list.\nconst pickPlayer = (state, { player }) => {\n  \n  if (player.isPicked === false) {\n    player.isPicked = true;\n    state.players = [...state.players, player];\n  };    \n\n  return {\n    ...state   \n  }; \n};\n\n// drawPlayer ensures players with the lowest play count are drawn first.\n// If multiple players share the lowest play count, they are picked at random to avoid bias over multiple games.\nconst drawPlayer = (state) => {       \n  // If at least one player in the bank remains unpicked:\n    if (state.bank.some(player => player.isPicked === false)) {\n\n      // Filter players who have already been selected\n      let filteredBank = state.bank.filter( player => player.isPicked === false);\n\n      // Build a new randomised list from the filtered bank\n      let randomisedFilter = [];\n      for (let i = filteredBank.length; i > 0; i -= 1) {\n        let pick = filteredBank.splice(Math.floor(Math.random() * i), 1);\n        randomisedFilter.push(pick[0]);\n      };\n\n      // Sort highest to lowest play counts (players with same play counts will now not always appear at same/similar indices)\n      randomisedFilter.sort(( a, b ) => a.play_count - b.play_count); \n\n      // Select the first player (so, a player from the set of players with the lowest score, produced randomly), and add to players list\n      randomisedFilter[0].isPicked = true;\n      state.players = [...state.players, randomisedFilter[0]];\n    };\n\n  return {\n    ...state,\n  }; \n};\n\n// addPlayer handles the addition of new players to the picks list, and includes unique name validation.\nconst addPlayer = (state, { player }) => {\n  // trim trailing whitespace from player name\n  player.name = player.name.trimLeft().trimRight();\n  \n  // prevent nameless players being added\n  if (player.name === \"\") {\n    alert(\"You cannot add a nameless player!\");\n    return state;\n\n  // prevent non-unique player names (case insensitive)\n  } else if (state.bank.some(bankPlayer => bankPlayer.name.toLowerCase() === player.name.toLowerCase())) {\n    alert(`A player called ${player.name} already exists in the bank. You can either add them directly from the bank with the pick button, or choose a different name`);\n    return state;\n\n    // invite user to differentiate a name that matches a picked name, in case e.g. 2 Jens are playing\n  } else if (state.players.some(playersMember => playersMember.name.toLowerCase() === player.name.toLowerCase())) {\n    alert(`A player called ${player.name} has already been picked. You can add an initial to tell them apart`);\n    return state;\n  } \n\n  return {\n    ...state,\n    players: [...state.players, player],    \n  }; \n};\n\n// deletePlayer fires after an API call to detele a player from the database.\n// It returns a new version of the local Bank with the delete player removed.\nconst deletePlayer = (state, { playerId }) => {\n  let checkedPlayers = state.players;\n\n  // Ensure that if the player has been added to the picked list, they are deleted from there\n  if (checkedPlayers.some(playersMember => playersMember.id === playerId)) {\n    checkedPlayers = checkedPlayers.filter((player) => player.id !== playerId);\n  }\n  // Filter the bank to remove the deleted player\n  let updatedBank = state.bank.filter((player) => player.id !== playerId);\n\n  return {\n    ...state, \n    bank: [...updatedBank],\n    players: [...checkedPlayers],\n  };\n}\n\n// startGame fires when the \"Create Teams\" button is pressed and moves the view to Teams, hiding the New Players view.\nconst startGame = (state) => {\n  return {\n    ...state,\n    playersChosen: true,  \n  };\n}\n\n// clearPickedPlayers clears the picked players list.\nconst clearPickedPlayers = (state) => {\n  state.bank.forEach(player => player.isPicked = false);\n \n  return {\n    ...state,\n    players: [],\n  }; \n};\n\n// randomiseTeams randomises the picked players list and pushes players to each team list.\nconst randomiseTeams = (state) => {\n  let players = [...state.players];\n  let shuffledPlayers = [];\n\n  // For genuine (pseudo!)randomness, players are first pulled at random from the players list, and then pushed to the front of a new list.\n  // This avoids biasing effects: should players be pushed at random into an empty list, those players pushed first will cluster together before the list grows.\n  // This matters because the draw feature always adds players in a predictable order (according to their play-counts). \n  for (let i = players.length; i > 0; i -= 1) {\n    let pick = players.splice(Math.floor(Math.random() * i), 1);\n    shuffledPlayers.push(pick[0]);\n  };\n\n  return {\n    ...state,\n    team1: shuffledPlayers.slice(0, (shuffledPlayers.length / 2)),    \n    team2: shuffledPlayers.slice(shuffledPlayers.length / 2),    \n  };\n};\n\n// generateName randomly generates a triple-barreled team name by picking words at random from three lists (see bottom).\nconst generateName = () => {\n  let adjective = adjectives[(Math.floor(Math.random() * adjectives.length))];  \n  let everyday = everydayWords[(Math.floor(Math.random() * everydayWords.length))]; \n  let noun = nouns[(Math.floor(Math.random() * nouns.length))]; \n  \n  let teamName = `${adjective} ${everyday} ${noun}`;\n\n  return {\n    teamName,\n  }\n}\n\n// Calls generateName() to assign team 1's name\nconst generateName1 = (state) => {\n  let name = generateName().teamName;\n  return {\n    ...state,\n    team1Name: name,\n  }; \n};\n\n// Calls generateName() to assign team 2's name\nconst generateName2 = (state) => {\n  let name = generateName().teamName;\n  return {\n    ...state,\n    team2Name: name,\n  }; \n};\n\n// save returns the initial application state, and is dispatched after the api receives player data from the current game\nconst save = () => {\n    return initial\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ABOUT_CLICKED\": return toggleAbout(state);\n    case \"STORE_PLAYERS\": return storePlayers(state, action);\n    case \"PICK_PLAYER\": return pickPlayer(state, action);\n    case \"DRAW_PLAYER\": return drawPlayer(state);\n    case \"ADD_PLAYER\": return addPlayer(state, action);\n    case \"DELETE_PLAYER\": return deletePlayer(state, action);    \n    case \"CREATE_TEAMS\": return startGame(randomiseTeams(state));\n    case \"CLEAR_CLICKED_PLAYERS\": return clearPickedPlayers(state);\n    case \"RANDOMISE_TEAMS\": return randomiseTeams(state);\n    case \"GENERATE_NAME1\": return generateName1(state);\n    case \"GENERATE_NAME2\": return generateName2(state);\n    case \"SAVE\": return save(state);\n    default: return state;\n  }\n};\n\n// Word banks for name generator\n\nconst adjectives = [\n  \"Flying\",\n  \"Tremendous\",\n  \"Furious\",\n  \"Surging\",\n  \"Majestic\",\n  \"Dazzling\",\n  \"Mighty\",\n  \"Dribbling\",\n  \"Tottering\",\n  \"Shambling\",\n  \"Staggering\",\n  \"Stumbling\",\n  \"Doddering\",\n  \"Shambolic\",\n  \"Drunken\",\n  \"Glorious\",\n  \"Magnificent\",\n  \"Torrential\",\n  \"Lightning\"\n];\n\nconst everydayWords = [\n  \"Foot\",\n  \"Toe\",\n  \"Big Toe\",\n  \"Heel\",\n  \"Hamstrung\",\n  \"Knee\",\n  \"Tootsie\",\n  \"Boot\",\n  \"Trainer\",\n  \"ArmChair\",\n  \"Deckchair\",\n  \"Couch\",\n  \"Sofa\",\n  \"Beer\",\n  \"Lager\",\n  \"Booze\"\n];\n\nconst nouns = [\n  \"Colonels\",\n  \"Crushers\",\n  \"Divas\",\n  \"Amigos\",\n  \"Stars\",\n  \"Typhoons\",\n  \"Ladies\",\n  \"Boys\",\n  \"Squirrels\",\n  \"Brigade\",\n  \"Foxes\",\n  \"Heroes\",\n  \"Wolves\",\n  \"Mob\",\n  \"Troop\",\n  \"Legion\",\n  \"Blokes\",\n  \"Lassies\",\n  \"Lads\"\n];\n\nexport default reducer;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport initial from \"./initial\";\nimport reducer from \"./reducer\";\n\nconst composeEnhancers =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  \nconst store = createStore(\n  reducer,\n  initial,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import reportWebVitals from './reportWebVitals';\nimport './styles/main.css';\nimport App from './App';\nimport store from \"./data/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// reportWebVitals();\n"],"sourceRoot":""}